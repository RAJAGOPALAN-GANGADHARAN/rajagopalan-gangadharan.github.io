<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Rajagopalan's Space</title><link>https://rajagopalan-gangadharan.github.io/posts/</link><description>Recent content in Posts on Rajagopalan's Space</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 08 Jun 2020 08:06:25 +0600</lastBuildDate><atom:link href="https://rajagopalan-gangadharan.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Search Results</title><link>https://rajagopalan-gangadharan.github.io/search/</link><pubDate>Tue, 08 Jun 2010 08:06:25 +0600</pubDate><guid>https://rajagopalan-gangadharan.github.io/search/</guid><description>This file exists solely to respond to /search URL with the related search layout template.
No content shown here is rendered, all content is based in the template layouts/page/search.html
Setting a very low sitemap priority will tell search engines this is not important content.
This implementation uses Fusejs, jquery and mark.js
Initial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [&amp;ldquo;HTML&amp;rdquo;, &amp;ldquo;JSON&amp;rdquo;] ```</description></item><item><title>Template Library</title><link>https://rajagopalan-gangadharan.github.io/posts/template-library/</link><pubDate>Mon, 08 Jun 2020 08:06:25 +0600</pubDate><guid>https://rajagopalan-gangadharan.github.io/posts/template-library/</guid><description>Fenwick Tree #include&amp;lt;bits/stdc++.h&amp;gt;using namespace std; template&amp;lt;typename T&amp;gt; class FenwickTree { vector&amp;lt;T&amp;gt; BIT; int n; public: FenwickTree(int n,vector&amp;lt;T&amp;gt;&amp;amp; arr,T def) { BIT.assign(n + 1, def); this-&amp;gt;n = n; } void update(int i,T v) { while (i &amp;lt;= n) BIT[i] += v, i += i &amp;amp; -i; } T query(int i,T def) { //get from 0 to i T sum = def; while(i&amp;gt;0) sum += BIT[i], i -= i &amp;amp; -i; return sum; } }; class RangeFenwickTree { int n; vector&amp;lt;int&amp;gt; BIT1; vector&amp;lt;int&amp;gt; BIT2; public: RangeFenwickTree(int n,vector&amp;lt;int&amp;gt;&amp;amp; arr) { this-&amp;gt;n = n; BIT1.</description></item></channel></rss>