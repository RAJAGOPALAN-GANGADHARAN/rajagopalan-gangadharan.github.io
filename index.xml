<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Rajagopalan's Space</title><link>https://rajagopalan-gangadharan.github.io/</link><description>Recent content on Rajagopalan's Space</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 08 Jun 2020 08:06:25 +0600</lastBuildDate><atom:link href="https://rajagopalan-gangadharan.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Search Results</title><link>https://rajagopalan-gangadharan.github.io/search/</link><pubDate>Tue, 08 Jun 2010 08:06:25 +0600</pubDate><guid>https://rajagopalan-gangadharan.github.io/search/</guid><description>This file exists solely to respond to /search URL with the related search layout template.
No content shown here is rendered, all content is based in the template layouts/page/search.html
Setting a very low sitemap priority will tell search engines this is not important content.
This implementation uses Fusejs, jquery and mark.js
Initial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [&amp;ldquo;HTML&amp;rdquo;, &amp;ldquo;JSON&amp;rdquo;] ```</description></item><item><title>LCA</title><link>https://rajagopalan-gangadharan.github.io/posts/useful-tech/lca/</link><pubDate>Mon, 08 Jun 2020 08:06:25 +0600</pubDate><guid>https://rajagopalan-gangadharan.github.io/posts/useful-tech/lca/</guid><description>LCA Using Binary Lifting k=0 means the parent node Create a table P[K][N] -&amp;gt; N is number of nodes 2^k&amp;lt;=N So k&amp;lt;=logN Hence Size of table is N*logN jumps are made in order of powers of 2 -&amp;gt;1,2,4...etc trying to divide by 2 let mid=par[i][k-1] (2^(k-1)th parent if exists) par[i][k] is par[mid][k-1] Its basically dividing a big jump into 2. First make 2 nodes that we are going to find LCA to same depth using Walk function if current jump results -1 then we have jumped of the table.</description></item><item><title>Template Library</title><link>https://rajagopalan-gangadharan.github.io/posts/template-library/</link><pubDate>Mon, 08 Jun 2020 08:06:25 +0600</pubDate><guid>https://rajagopalan-gangadharan.github.io/posts/template-library/</guid><description>Fenwick Tree #include&amp;lt;bits/stdc++.h&amp;gt;using namespace std; template&amp;lt;typename T&amp;gt; class FenwickTree { vector&amp;lt;T&amp;gt; BIT; int n; public: FenwickTree(int n,vector&amp;lt;T&amp;gt;&amp;amp; arr,T def) { BIT.assign(n + 1, def); this-&amp;gt;n = n; } void update(int i,T v) { while (i &amp;lt;= n) BIT[i] += v, i += i &amp;amp; -i; } T query(int i,T def) { //get from 0 to i T sum = def; while(i&amp;gt;0) sum += BIT[i], i -= i &amp;amp; -i; return sum; } }; class RangeFenwickTree { int n; vector&amp;lt;int&amp;gt; BIT1; vector&amp;lt;int&amp;gt; BIT2; public: RangeFenwickTree(int n,vector&amp;lt;int&amp;gt;&amp;amp; arr) { this-&amp;gt;n = n; BIT1.</description></item><item><title>Trees</title><link>https://rajagopalan-gangadharan.github.io/posts/useful-datastructures/trees/</link><pubDate>Mon, 08 Jun 2020 08:06:25 +0600</pubDate><guid>https://rajagopalan-gangadharan.github.io/posts/useful-datastructures/trees/</guid><description>Some Facts about trees Simple path is a path that doesn&amp;rsquo;t contain any node twice. A tree has n-1 edges! Segment Trees Use segment trees for questions on updating values and querying. Can be used with complex operations like pairs,sets etc. Find very effecient and faster updating (used to insert too), by Finding path to root from one node.
void update(int pos,int val){ pos += k; tree[pos] = val; int odd = 1; //this switches between alternate levels of the segment tree goes upwards while(pos&amp;gt;&amp;gt;=1 &amp;gt;0){ /* use this in case for level switching if(odd) tree[pos] = tree[2*pos] | tree[2*pos+1]; else tree[pos] = tree[2*pos] ^ tree[2*pos+1]; odd = 1-odd; */ tree[pos]=tree[2*pos]+tree[2*pos+1]; } } for(int i=0;i&amp;lt;n;i++){ int val; cin&amp;gt;&amp;gt;val; update(i,val); }</description></item><item><title>Search Results</title><link>https://rajagopalan-gangadharan.github.io/search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rajagopalan-gangadharan.github.io/search/</guid><description>This file exists solely to respond to /search URL with the related search layout template.
No content shown here is rendered, all content is based in the template layouts/page/search.html
Setting a very low sitemap priority will tell search engines this is not important content.
This implementation uses Fusejs, jquery and mark.js
Initial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [&amp;ldquo;HTML&amp;rdquo;, &amp;ldquo;JSON&amp;rdquo;] ```</description></item></channel></rss>